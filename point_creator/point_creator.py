# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PointCreator
                                 A QGIS plugin
 This plugin create point by coordinate
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-18
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Danil Skryl
        email                : danskrbiz@yandex.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsPointXY, QgsCoordinateReferenceSystem, QgsGeometry, QgsField, QgsFeature, QgsVectorLayer, QgsProject

from qgis.gui import QgsMapToolEmitPoint
from qgis.PyQt import QtWidgets
from qgis.PyQt import uic

from qgis.core import *
from qgis.utils import *

from qgis.core import QgsProject
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .point_creator_dockwidget import PointCreatorDockWidget
import os.path


class PointCreator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PointCreator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Point creator')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'PointCreator')
        self.toolbar.setObjectName(u'PointCreator')

        #print "** INITIALIZING PointCreator"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PointCreator', message)
        
    # Выбрасывается ошибка
    def errMessage(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Ошибка")
        msg.setInformativeText('Введите число!')
        msg.setWindowTitle("Ошибка")
        msg.exec_()
    
    # Получение координат и проверка, что введено число
    def captureCoordsButton(self):
        coords_x = self.dockwidget.spValueX.text()
        coords_y = self.dockwidget.spValueY.text()
        if coords_y.isdigit() and coords_x.isdigit():
            x = float (coords_x)
            y = float (coords_y)
            
            self.createPoint(x, y)
            
        elif (coords_x.lstrip('-').replace('.','',1).isdigit() and coords_y.lstrip('-').replace('.','',1).isdigit()):
            x = float (coords_x)
            y = float (coords_y)
            
            self.createPoint(x, y)
            
        else:
            print("Введено не число!")
            self.errMessage()
    
    # Создание векторного слоя точки
    def createPoint(self, x, y):
        # Создание слоя векторных данных типа точка в оперативной памяти
        vl = QgsVectorLayer("Point?crs=EPSG:28402", "point", "memory")
        pr = vl.dataProvider()
        pr.addAttributes([QgsField("ID", QVariant.String)])
        vl.updateFields()

        # Создание точки в проекции EPSG:28402
        point = QgsPointXY(x, y)
        geom = QgsGeometry.fromPointXY(point)

        # Создание объекта QgsFeature и добавление в слой
        feature = QgsFeature()
        feature.setGeometry(geom)
        pr.addFeature(feature)

        # Добавление слоя в проект QGIS
        QgsProject.instance().addMapLayer(vl)
        
        
#        vl = QgsVectorLayer("Point", "point", "memory")
#        pr = vl.dataProvider()
#        pr.addAttributes([QgsField("ID", QVariant.String)])
#        vl.updateFields()
#
#        f = QgsFeature()
#        f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
#        pr.addFeature(f)
#        vl.updateExtents()
#        QgsProject.instance().addMapLayer(vl)
        
    # Очистка полей от значений
    def clearValues(self):
        self.dockwidget.spValueX.clear()
        self.dockwidget.spValueY.clear()
        
    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/point_creator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        print ("** CLOSING PointCreator")

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        print ("** UNLOAD PointCreator")

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Point creator'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            print ("** STARTING PointCreator")

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = PointCreatorDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            
            self.dockwidget.pushButton.clicked.connect(self.captureCoordsButton)
            self.dockwidget.clearButton.clicked.connect(self.clearValues)
            
            self.iface.addDockWidget(Qt.TopDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
